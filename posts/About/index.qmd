---
title: About the Blog @ Mark's Math
date: 2025-06-30
order: 20250630
description: "This is a description of my first post. It really can't have new lines or other groovy things."
bluesky-comments:
  profile: did:plc:da35a6l2asjpf5y4fmyc662t
format:
    html: 
        toc: true
    pdf:
        output-file: "AboutTheBlog"
        toc: false
---

Like [Mark's Math itself](https://marksmath.org/), the *Blog @ Mark's Math* is built with [Quarto](https://quarto.org), which isn't a standard blogging tool like Wordpress or Medium or Ghost or some such. Quarto is a more general tool for publishing in many formats and it focuses, more specifically, on producing technical documents. If that makes no sense, perhaps I should show why Quarto is a great choice for a technical blog in academia and discuss the tech stack for this site more generally.

Sounds like a good first blog post!

## Quarto 

Quarto's web site describes it as 

> An open-source scientific and technical publishing system

From my perspective, that means that it's built to facilitate the process of creating webpages and PDFs using tools that those of us in the technical disciplines are familiar with. Here are a few of the highlights:

### Input 

For the most part, the primary content of Quarto documents are authored in [markdown](https://en.wikipedia.org/wiki/Markdown). Quarto's markdown syntax is extended a bit but still much lighter than HTML or LaTeX, which is a major draw for me.

### Output 

Quarto can create documents in multiple formats, including HTML, PDF, Word, and Open Office. You can view [this page in PDF format](AboutTheBlog.pdf), for example. Quarto can also produce several presentation formats, namely Powerpoint, Beamer, and RevealJS. All of this is super convenient in an academic context; I can write my webpages, presentations, and exams all with this same tool. You can view this very post in [PDF format](AboutTheBlog.pdf), for example. 

### Mathematical typesetting

If you're writing in a technical discipline, then you need mathematical typesetting. The de facto standard for writing mathematics is LaTeX, so Quarto translates LaTeX snippets into mathematics in HTML or PDF. For example, to write

If $f(x) = e^{-x^2}$, then 
$$\int_{-\infty}^{\infty} f(x) \, dx = \sqrt{\pi}.$$

I could type

    If $f(x) = e^{-x^2}$, then 
    $$\int_{-\infty}^{\infty} f(x) \, dx = \sqrt{\pi}.$$


The result can be rendered using either MathJax or KaTeX in an HTML setting or using LaTeX itself within a PDF.

### Computer code 

Quarto makes it easy to incorporate code into your documents. You can display the input, display the output, or integrate that output into your document. We might sum the first 100 positive integers and display the result for example: 

```{python}
#| echo: true 
s = 0
for i in range(101):
    s = s+i 
print(s)
```

You can incorporate Python, Julia, R, or Javascript in this manner. For more complicated cases, you can fold the code or hide it all together.

### Figures with Code 

I find it particularly convenient to generate images using code that is embedded right in the document. It's nice to have that code for the image tied to the source code for later reference. In this situation, I'll typically hide the code or fold it up, as the next example shows[.]{.content-visible when-format="html"} [(although, the code-fold works only in the web version).]{.content-visible when-format="pdf"} In that example, you can choose to to view a bar chart for letters by frequency sorted either alphabetically or by frequency.

Here's an example that uses Python to do this. Note that you could just as easily use Julia or R for this purpose.

:::{.content-visible when-format="html"}
::::: {.panel-tabset}
## Letters by frequency

::::::: {.light-content}
```{python}
#| echo: true
#| code-fold: true
import pandas as pd
import matplotlib.pyplot as plt
letters = pd.read_csv("./components/letters.csv")

plt.figure(figsize=(8, 4))
plt.bar(letters["letter"], letters["frequency"], edgecolor='black')
plt.xlabel("Letter")
plt.ylabel("Frequency")
plt.tight_layout()
ax = plt.gca()
ax.set_aspect(80)
plt.show()
```
:::::::

::::::: {.dark-content}
```{python}
#| echo: true
#| code-fold: true
import pandas as pd
import matplotlib.pyplot as plt
letters = pd.read_csv("./components/letters.csv")

fig, ax = plt.subplots(figsize=(8, 4), facecolor="#222")
ax.set_facecolor("#222")
plt.bar(letters["letter"], letters["frequency"], edgecolor='white')
plt.xlabel("Letter")
plt.ylabel("Frequency")
plt.tight_layout()
ax.tick_params(colors="white") 
ax.spines[:].set_color("white")
ax.set_xlabel("Letter", color="white")
ax.set_ylabel("Frequency", color="white")
ax.set_aspect(80)
plt.show()
```
:::::::

## Letters alphabetically 

::::::: {.light-content}
```{python}
#| echo: true
#| code-fold: true
import pandas as pd
import matplotlib.pyplot as plt
letters = pd.read_csv("./components/letters.csv")
letters = letters.sort_values('letter')

plt.figure(figsize=(8, 4))
plt.bar(letters["letter"], letters["frequency"], edgecolor='black')
plt.xlabel("Letter")
plt.ylabel("Frequency")
plt.tight_layout()
ax = plt.gca()
ax.set_aspect(80)
plt.show()
```
:::::::
::::::: {.dark-content}
```{python}
#| echo: true
#| code-fold: true
import pandas as pd
import matplotlib.pyplot as plt
letters = pd.read_csv("./components/letters.csv")
letters = letters.sort_values('letter')

fig, ax = plt.subplots(figsize=(8, 4), facecolor="#222")
ax.set_facecolor("#222")
plt.bar(letters["letter"], letters["frequency"], edgecolor='white')
plt.xlabel("Letter")
plt.ylabel("Frequency")
plt.tight_layout()
ax.tick_params(colors="white") 
ax.spines[:].set_color("white")
ax.set_xlabel("Letter", color="white")
ax.set_ylabel("Frequency", color="white")
ax.set_aspect(80)
plt.show()
```
:::::::
:::::
:::

:::{.content-visible when-format="pdf"}
## Letters by frequency

```{python}
#| echo: true
import pandas as pd
import matplotlib.pyplot as plt
letters = pd.read_csv("./components/letters.csv")

plt.figure(figsize=(8, 4))
plt.bar(letters["letter"], letters["frequency"], edgecolor='black')
plt.xlabel("Letter")
plt.ylabel("Frequency")
plt.tight_layout()
ax = plt.gca()
ax.set_aspect(80)
plt.show()
```
:::

Note that the "Letters by frequency"/"Letters alphabetically" buttons (shown only in the web version) are created using a so-called *tabset*. There are quite a few of those kinds of goodies that come easy with Quarto.

### Figures and interactivity

::: {.content-visible when-format="html"}
You can make your figures interactive, if you're willing to work with Javascript a bit. In the image below, the bars are sortable in response to a radio selector in a dynamic way that Python can't quite match.

```{ojs}
import {sortable_alpha_barchart} from './components/sortable_barchart.js';
viewof radio_sort = Inputs.radio(["Alphabetically", "By frequency"], {
  label: html`<span style="font-weight: bold">Sort</span>:`,
  value: "By frequency"
});
letters = await FileAttachment('./components/letters.csv').csv({typed: true});
barplot = sortable_alpha_barchart(letters)
```
```{ojs}
react = barplot.sort(radio_sort)
```

The code for this example is about 135 lines long and can be viewed in this document's GitHub Repo.

Another obvious issue is that interactive content can only be included in HTML based formats. Quarto makes it easy, though, to web and PDF versions of in your output.
:::

::: {.content-visible when-format="pdf"}
When creating HTML based output, you can add interactivity to your documents using Javascript. You'll have to check the web version of this page to see that in action, though.
:::

### Light/Dark modes

Another HTML goodie that Quarto makes relatively easy is creating webpages that respect your user's light and dark mode preferences. It turns out that Gen-Z (including today's college students) generally dig dark mode so this is worth using, if you're an academic. You might notice the <span class="light-content"><a href="http://localhost:5763/posts/About/" class="quarto-color-scheme-toggle quarto-navigation-tool px-1" onclick="window.quartoToggleColorScheme(); return false;" title="Toggle dark mode" data-original-href="http://localhost:5763/posts/About/index.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" stroke="black" class="bi bi-toggle-off" viewBox="0 0 16 16">
  <path d="M11 4a4 4 0 0 1 0 8H8a5 5 0 0 0 2-4 5 5 0 0 0-2-4zm-6 8a4 4 0 1 1 0-8 4 4 0 0 1 0 8M0 8a5 5 0 0 0 5 5h6a5 5 0 0 0 0-10H5a5 5 0 0 0-5 5"/>
</svg></a></span><span class="dark-content"><a href="http://localhost:5763/posts/About/" class="quarto-color-scheme-toggle quarto-navigation-tool px-1" onclick="window.quartoToggleColorScheme(); return false;" title="Toggle dark mode" data-original-href="http://localhost:5763/posts/About/index.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgba(255,255,255,0.8)" class="bi bi-toggle-on" viewBox="0 0 16 16">
  <path d="M5 3a5 5 0 0 0 0 10h6a5 5 0 0 0 0-10zm6 9a4 4 0 1 1 0-8 4 4 0 0 1 0 8"/>
</svg></a></span> icon in the navbar at the top of the page. This allows you to switch back and forth so you can check it out!

### Deployment

This blog is hosted on a Digital Ocean droplet, as is Mark's Math itself, which gives me complete control over the webserver configuration. There are easier ways to deploy websites, though, and Quarto facilitates the process that process to a variety of popular services like GitHub Pages, Netlify, Confluence, and more. They even support their own service called Quarto Pub.

## Commenting system 

About the commenting system

## Comments

{{< bluesky-comments 3lspdkn5d4s2t >}}

